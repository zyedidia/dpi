local conf = dofile("conf.lua")

local platforms = {
    raspi1ap = {
        mcpu = "arm1176jzf-s",
        march = "armv6zk",
        archid = "arm",
        boardid = "raspi",
    },
    raspi3b = {
        mcpu = "cortex-a53",
        march = "armv8-a",
        archid = "aarch64",
        boardid = "raspi",
    },
    raspi4b = {
        mcpu = "cortex-a72",
        march = "armv8-a+crc",
        archid = "aarch64",
        boardid = "raspi",
    }
}

local platform = platforms[conf.board]

if platform == nil then
    print("unknown board: " .. conf.board)
    return r{}
end

local prefixes = {
    aarch64 = "aarch64-none-elf",
    arm = "arm-none-eabi",
}

local prefix = prefixes[platform.archid]

local knit = import("knit")

local tools = {
    dc := $prefix-gdc
    as := $prefix-as
    ld := $prefix-ld
    cpp := $prefix-cpp
    objcopy := $prefix-objcopy
    objdump := $prefix-objdump
}

local O = "s"
local link = "link.ld"

local versions = {
    f"-fversion=$(platform.boardid)",
    f"-fversion=$(conf.board)",
}

local flto = ""
if conf.lto then
    flto = "-flto"
end
local frelease = ""
if conf.release then
    frelease = "-frelease"
end

local flags = {
    dc := -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti -O$O -g -nostartfiles -Wa,-mcpu=$(platform.mcpu) -Wa,-march=$(platform.march) $versions $flto $frelease
    as := -Wa,-mcpu=$(platform.mcpu) -Wa,-march=$(platform.march) $flto
    -- using gdc as linker for LTO
    ld := -fno-druntime -T $link -Wl,--no-warn-rwx-segments $flto
}

-- Use Ctrl-A x to quit qemu
local qemu := qemu-system-$(platform.archid)
local gdb := gdb-multiarch

local prog = conf.prog
local kernel = dofile("kernel/build.knit").build(platform.archid, platform.boardid)
local main = dofile(f"$prog/build.knit")
local libd = dofile("libd/build.knit")

local allsrc = knit.rglob(".", "*.d")

return r{
$ all: $prog.bin $prog.list
$ %.o: %.d
    $(tools.dc) $(flags.dc) $(libd.packages) $input -c -o $output
$ %.o: %.s
    $(tools.dc) $(flags.as) -xassembler-with-cpp $input -c -o $output
$ %.bin: %.elf
    $(tools.objcopy) $input -O binary $output
$ %.list: %.elf
    $(tools.objdump) -D $input > $output
$ %.list: %.o
    $(tools.objdump) -D $input > $output

$ $prog/$prog.o:M: $(main.files)
    $(tools.dc) $(flags.dc) $(main.packages) $(kernel.packages) $(libd.packages) $input -c -o $output
$ kernel/kernel.o:M: $(kernel.files)
    $(tools.dc) $(flags.dc) $(kernel.packages) $(libd.packages) $input -c -o $output
$ libd/libd.o:M: $(libd.files)
    $(tools.dc) $(flags.dc) $(libd.packages) $(kernel.packages) $input -c -o $output
$ $prog.elf: $prog/$prog.o kernel/kernel.o libd/libd.o dstart.o arch/$(platform.archid)/start.o
    $(tools.dc) $(flags.dc) $(flags.ld) $input -o $output

$ qemu:VB: $prog.elf
    $qemu -M $(conf.board) -nographic -kernel $input -serial null -serial mon:stdio -no-reboot
$ qemu-gdb:VB: $prog.elf
    $qemu -s -S -M $(conf.board) -nographic -kernel $input -serial null -serial mon:stdio -no-reboot &
    $gdb -ex "file $input" -ex "target remote localhost:1234"

$ prog:VB: $prog.bin
    sudo piprog $input

$ format:VB:
    dfmt -i --brace_style=otbs $allsrc
}
