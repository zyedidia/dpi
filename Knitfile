local archid = "aarch64"
local prefix = f"$archid-none-elf"

local knit = import("knit")

local tools = {
    dc := $prefix-gdc
    as := $prefix-as
    ld := $prefix-ld
    cpp := $prefix-cpp
    objcopy := $prefix-objcopy
    objdump := $prefix-objdump
}

local cpu = "cortex-a72"
local arch = "armv8-a+crc"
local O = "s"
local link = "link.ld"

local boardid = "raspi"
local boardversion = "Raspi"
local boardmodel = "Raspi3b"

local versions = {
    f"-fversion=$boardversion",
    f"-fversion=$boardmodel",
}

local flags = {
    dc := -O$O -g -nostartfiles -fno-druntime -Wa,-mcpu=$cpu -Wa,-march=$arch $versions -flto
    as := -mcpu=$cpu -march=$arch
    -- using gdc as linker for LTO
    ld := -T $link -Wl,--no-warn-rwx-segments -flto
}

-- Use Ctrl-A x to quit qemu
local qemu := qemu-system-$archid
local board := raspi3b
local gdb := gdb-multiarch

local prog = cli.prog or "hello"
local kernel = dofile("kernel/build.knit").build(archid, boardid)
local main = dofile(f"$prog/build.knit")
local libd = dofile("libd/build.knit")

local allsrc = knit.rglob(".", "*.d")

return r{
$ all: $prog.bin $prog.list
$ %.o: %.d
    $(tools.dc) $(flags.dc) $(libd.packages) $input -c -o $output
$ %.o: %.s
    $(tools.cpp) $input | $(tools.as) $(flags.as) -c -o $output
$ %.bin: %.elf
    $(tools.objcopy) $input -O binary $output
$ %.list: %.elf
    $(tools.objdump) -D $input > $output
$ %.list: %.o
    $(tools.objdump) -D $input > $output

$ $prog/$prog.o:M: $(main.files)
    $(tools.dc) $(flags.dc) $(main.packages) $(kernel.packages) $(libd.packages) $input -c -o $output
$ kernel/kernel.o:M: $(kernel.files)
    $(tools.dc) $(flags.dc) $(kernel.packages) $(libd.packages) $input -c -o $output
$ libd/libd.o:M: $(libd.files)
    $(tools.dc) $(flags.dc) $(libd.packages) $input -c -o $output
$ $prog.elf: $prog/$prog.o kernel/kernel.o libd/libd.o dstart.o start.o
    $(tools.dc) $(flags.dc) $(flags.ld) $input -o $output

$ qemu:VB: $prog.elf
    $qemu -M $board -nographic -kernel $input -serial null -serial mon:stdio -no-reboot
$ qemu-gdb:VB: $prog.elf
    $qemu -s -S -M $board -nographic -kernel $input -serial null -serial mon:stdio -no-reboot &
    $gdb -ex "file $input" -ex "target remote localhost:1234"

$ prog:VB: $prog.bin
    sudo piprog $input

$ format:VB:
    dfmt -i --brace_style=otbs $allsrc
}
