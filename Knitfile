local knit = require("knit")
knit.addpath("build")
require("strict")

local conf = dofile("conf.lua")

local platforms = {
    raspi1ap = {
        mcpu = "arm1176jzf-s",
        march = "armv6zk",
        archid = "arm",
    },
    raspi3b = {
        mcpu = "cortex-a53",
        march = "armv8-a",
        archid = "aarch64",
    },
    raspi4b = {
        mcpu = "cortex-a72",
        march = "armv8-a+crc",
        archid = "aarch64",
    },
    rv32 = {
        march = "rv32im",
        mabi = "ilp32",
        archid = "riscv32",
    }
}

local platform = platforms[conf.board]

if platform == nil then
    print("unknown board: " .. conf.board)
    return r{}
end

local prefixes = {
    aarch64 = "aarch64-none-elf",
    arm = "arm-none-eabi",
    riscv32 = "riscv64-unknown-elf",
}

local prefix = prefixes[platform.archid]

function sel(cond, t, f)
    if cond then return t else return f end
end

local tools = {
    dc = sel(conf.dc == "gdc", f"$prefix-gdc", "ldc2"),
    cc := $prefix-gcc
    as := $prefix-as
    ld := $prefix-ld
    cpp := $prefix-cpp
    objcopy := $prefix-objcopy
    objdump := $prefix-objdump
}

local O = "s"
local link = "board/$(conf.board)/link.ld"

local flto = ""
local release = ""
local mflags = ""
local dcflags = ""
if conf.lto then
    flto = "-flto"
end

if conf.dc == "gdc" then
    local versions = {
        f"-fversion=$(conf.board)",
    }
    if conf.release then
        release = "-frelease"
    end
    if platform.mcpu ~= nil then
        mflags = mflags .. f" -mcpu=$(platform.mcpu)"
    end
    if platform.march ~= nil then
        mflags = mflags .. f" -march=$(platform.march)"
    end
    if platform.mabi ~= nil then
        mflags = mflags .. f" -mabi=$(platform.mabi)"
    end
    dcflags := -fno-exceptions -fno-rtti -O$O -g -nostartfiles $mflags $versions $flto $release -funittest
else
    local versions = {
        f"--d-version=$(conf.board)",
    }
    if conf.lto then
        lto = "--flto=full"
    end
    if conf.release then
        release = "--release"
    end
    if platform.mcpu ~= nil then
        mflags = mflags .. f" -mcpu=$(platform.mcpu)"
    end
    mflags = mflags .. f" -mtriple=$prefix"
    dcflags := --betterC --unittest -O$O -g $mflags $versions $lto $release -defaultlib=
end

local flags = {
    dc = dcflags,
    as := $mflags $flto
    -- using gdc as linker for LTO
    ld := -fno-druntime -T $link -Wl,--no-warn-rwx-segments $flto
}

-- Use Ctrl-A x to quit qemu
local qemu := qemu-system-$(platform.archid)
local gdb := gdb-multiarch

local kernel = dofile("kernel/build.knit").build(platform.archid, conf.board)
local libd = dofile("libd/build.knit")

local allsrc = knit.rglob(".", "*.d")

local dco = sel(conf.dc == "gdc", "-o", "-of")

local rules = r{
$ all: $(conf.prog).bin $(conf.prog).list
$ %.o: %.d
    $(tools.dc) $(flags.dc) $(libd.packages) $input -c $dco $output
$ %.o: %.s
    $(tools.cc) $(flags.as) -xassembler-with-cpp $input -c -o $output
$ %.bin: %.elf
    $(tools.objcopy) $input -O binary $output
$ %.list: %.elf
    $(tools.objdump) -D $input > $output
$ %.list: %.o
    $(tools.objdump) -D $input > $output
$ kernel/kernel.o:M: $(kernel.files)
    $(tools.dc) $(flags.dc) $(kernel.packages) $(libd.packages) $input -c $dco $output
$ libd/libd.o:M: $(libd.files)
    $(tools.dc) $(flags.dc) $(kernel.packages) $(libd.packages) $input -c $dco $output
}

local progs = {
    "hello",
    "boot",
    "test",
}

for _, prog in ipairs(progs) do
    local main = dofile(f"$prog/build.knit")
    rules = rules + r{
    $ $prog/$prog.o:M: $(main.files)
        $(tools.dc) $(flags.dc) $(main.packages) $(kernel.packages) $(libd.packages) $input -c $dco $output
    $ $prog.elf: $prog/$prog.o kernel/kernel.o libd/libd.o arch/$(platform.archid)/start.o
        $(tools.dc) $(flags.dc) $(flags.ld) $input -o $output
    }
end

rules =  rules + r{
$ qemu:VB: $(conf.prog).elf
    $qemu -M $(conf.board) -nographic -kernel $input -serial null -serial mon:stdio -no-reboot
$ qemu-gdb:VB: $(conf.prog).elf
    $qemu -s -S -M $(conf.board) -nographic -kernel $input -serial null -serial mon:stdio -no-reboot &
    $gdb -ex "file $input" -ex "target remote localhost:1234"

$ prog:VB: $(conf.prog).bin
    sudo piprog $input

$ format:VB:
    dfmt -i --brace_style=otbs $allsrc
$ clean:VB:
    knit :all -t clean
    rm -f *.bin
}

return b{rules}
